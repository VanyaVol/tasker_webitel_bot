const {
    buttons, buttons_settings, buttonsGetMonth, monthButtons, goToMainMenu, buttonSource, buttonType, dateButton, buttonEditSelect
} = require('./options.js');

const xl = require('excel4node');
const TelegramAPI = require('node-telegram-bot-api');
const axios = require("axios");
const token = '5899589110:AAFwsxjWwhzCUwzOfMP_o-25AnELV0GVMmI';
const bot = new TelegramAPI(token, {polling: true});

let company, type, source, description, link, data, marker, numberEdit= '';

bot.setMyCommands([
    {command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'},
    {command: '/info', description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞'},
    {command: '/close', description: '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º'}]);

bot.on('message', async msg => {
    const text = msg.text;
    const chatID = msg.chat.id;

    if (text === '/start') {
        await bot.sendMessage(chatID, 'üëã');
        return bot.sendMessage(chatID, `–í—ñ—Ç–∞—é! ${msg.from.first_name} –¶–µ –±–æ—Ç –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤.`, buttons);
    }

    if (text === '/close') {
        return bot.sendMessage(chatID, `${msg.from.first_name} —Ä–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    }

    if (text === '/info') {
        return bot.sendMessage(chatID, `–ê–≤—Ç–æ—Ä –í–æ–ª–æ—à–∏–Ω –Ü–≤–∞–Ω.`);
    }

    if (text && marker === 'inputDate') {
        await bot.sendMessage(chatID, '–ó–±–µ—Ä–µ–∂–µ–Ω–æ');
        await bot.sendMessage(chatID, 'üè†');
        await bot.sendMessage(chatID, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', buttons);

        marker = '';
        data = '';

        await axios.post(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks.json`, {
            name: `${msg.from.first_name} ${msg.from.last_name}`,
            company: company,
            type: type,
            source: source,
            link: link,
            date: `${msg.text}`,
            description: description
        });
        return msg.text = null;
    }

    if (text && marker === 'delete_number') {
        let listTask = {};
        let index = 1;

        await axios.get(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks.json`).then(value => {
            listTask = value.data;
        });

        if (listTask) {
            for (const listTaskElement in listTask) {
                if (+index === +msg.text) {
                    await axios.delete(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks/${listTaskElement}.json`)
                }
                index++;
            }
        }

        return bot.sendMessage(chatID, '–í–∏–¥–∞–ª–µ–Ω–æ!', goToMainMenu);
    }

    if (text && marker === 'company' && text !== '/close') {
        company = msg.text;
        msg.text = null;
        marker = '';
        await bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:', buttonType);
        return marker = 'type';
    }

    if (text && marker === 'link') {
        link = msg.text;
        msg.text = null;
        marker = '';
        await bot.sendMessage(chatID, '–í–µ–¥—ñ—Ç—å –æ–ø–∏—Å:');
        return marker = 'description';
    }

    if (text && marker === 'add_company_text') {
        company = msg.text;
        await axios.post('https://tasker-webitel-default-rtdb.firebaseio.com/company.json', {
            company: company
        });
        marker = '';
    }

    if (data && marker === 'type') {
        marker = '';
        data = '';
        return marker = 'source';
    }

    if (data && marker === 'source') {
        msg.text = null;
        marker = '';
        data = '';
    }

    if (data && marker === 'description') {
        await bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:', dateButton);
        description = msg.text;
        msg.text = null;
        marker = '';
        data = '';
    }

    if (text && marker === 'edit_number') {
        numberEdit = msg.text;
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:', buttonEditSelect);
    }
});

bot.on('callback_query', async msg => {
    const chatID = msg.message.chat.id;
    data = msg.data;
    let listMonth = async (numMonth) => {
        let listTaskStr = '';
        let listTask = {};
        let index = 1;
        marker = '';

        await axios.get(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${numMonth}/tasks.json`).then(value => {
            listTask = value.data;
        });

        if (listTask) {
            await bot.sendMessage(chatID, 'üìñ');
            await bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–∏–∫–ª–∏–∫—ñ–≤:');
            Object.values(listTask).map((value) => {
                listTaskStr = listTaskStr + `${index}. ${value.company} - ${value.description} - ${value.source} - ${value.type} - ${value.link} - ${value.date}\n\n`;
                index++;
            })
            return bot.sendMessage(chatID, listTaskStr, goToMainMenu);
        } else {
            return bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π... –°–ø—Ä–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∏–∫–∏.', goToMainMenu);
        }
    }

    let deleteMonth = async (numMonth) => {
        let listTaskStr = '';
        let listTask = {};
        let index = 1;

        await axios.get(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${numMonth}/tasks.json`).then(value => {
            listTask = value.data;
        });

        if (listTask) {
            await bot.sendMessage(chatID, 'üìñ');
            await bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–∏–∫–ª–∏–∫—ñ–≤:');
            Object.values(listTask).map((value) => {
                listTaskStr = listTaskStr + `${index}. ${value.company} - ${value.description} - ${value.source} - ${value.type} - ${value.link} - ${value.date}\n\n`;
                index++;
            })
            await bot.sendMessage(chatID, listTaskStr);
        } else {
            return bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π... –°–ø—Ä–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∏–∫–∏.', goToMainMenu);
        }

        await bot.sendMessage(chatID, '–í–∫–∞–∂—ñ—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∏–∫—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:');

        msg.text = null;
        return marker = 'delete_number';
    }

    let editMonth = async (numMonth) => {
        let listTaskStr = '';
        let listTask = {};
        let index = 1;

        await axios.get(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks.json`).then(value => {
            listTask = value.data;
        });

        if (listTask) {
            await bot.sendMessage(chatID, 'üìñ');
            await bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–∏–∫–ª–∏–∫—ñ–≤:');
            Object.values(listTask).map((value) => {
                listTaskStr = listTaskStr + `${index}. ${value.company} - ${value.description} - ${value.source} - ${value.type} - ${value.link} - ${value.date}\n\n`;
                index++;
            })
            await bot.sendMessage(chatID, listTaskStr);
        } else {
            await bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π... –°–ø—Ä–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∏–∫–∏.', goToMainMenu);
        }

        await bot.sendMessage(chatID, '–í–∫–∞–∂—ñ—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∏–∫—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:');
        msg.text = null;
        return marker = 'edit_number';
    }

    if (data === '/delete') {
        marker = 'delete';
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥:', buttonsGetMonth);
    }

    if (data === '/currentDate') {
        await bot.sendMessage(chatID, '–ó–±–µ—Ä–µ–∂–µ–Ω–æ');
        await bot.sendMessage(chatID, 'üè†');
        await bot.sendMessage(chatID, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', buttons);
        msg.text = null;
        marker = '';
        data = '';

        let month = (new Date().getMonth() + 1);
        let day = (new Date().getDate());

        if (month.toString().length < 2) {
            month = `0${month}`;
        }

        if (day.toString().length < 2) {
            day = `0${day}`;
        }

        marker = '';

        return axios.post(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks.json`, {
            name: `${msg.from.first_name} ${msg.from.last_name}`,
            company: company,
            type: type,
            source: source,
            link: link,
            date: `${day}.${month}.${new Date().getFullYear()}`,
            description: description
        });
    }

    if (data === '/inputDate') {
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "01.01.2023":');
        return marker = 'inputDate';
    }

    if (data === '/add') {
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó:');
        msg.text = null;
        return marker = 'company';
    }

    if (data === '/consultation') {
        await bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—É—Ä—Å:', buttonSource);
        type = '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è'
        return marker = 'type';
    }

    if (data === '/solution') {
        await bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—É—Ä—Å:', buttonSource);
        type = '–í–∏—Ä—ñ—à–µ–Ω–Ω—è';
        return marker = 'type';
    }

    if (data === '/telegram') {
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å:');
        source = 'Telegram'
        link = 'Telegram'
        return marker = 'description';
    }

    if (data === '/skype') {
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å:');
        source = 'Skype'
        link = 'Skype'
        return marker = 'description';
    }

    if (data === '/jira') {
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞—Å–∫—É:');
        msg.text = null;
        source = 'Jira';
        return marker = 'link';
    }

    if (data === '/goToMainMenu') {
        return bot.sendMessage(chatID, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', buttons);
    }

    if (data === '/list') {
        marker = 'list';
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', buttonsGetMonth);
    }

    if (data === '/current_month' && marker === 'delete') {
        return deleteMonth(new Date().getMonth() + 1);
    }

    if (data === '/select_month' && marker === 'delete') {
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', monthButtons);
    }

    if (data === '/select_month') {
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', monthButtons);
    }

    if (data === '/edit') {
        marker = 'edit';
        return bot.sendMessage(chatID, '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥:', buttonsGetMonth);
    }

    if (data === '/current_month' && marker === 'edit') {
       return editMonth(new Date().getDate()+1);
    }

    if (data === '/current_month' && marker === 'list') {
        return listMonth(new Date().getMonth() + 1);
    }

    if (data === '/month_1' && marker === 'delete') {
        return deleteMonth(1);
    }

    if (data === '/month_2' && marker === 'delete') {
        return deleteMonth(2);
    }

    if (data === '/month_3' && marker === 'delete') {
        return deleteMonth(3);
    }

    if (data === '/month_4' && marker === 'delete') {
        return deleteMonth(4);
    }

    if (data === '/month_5' && marker === 'delete') {
        return deleteMonth(5);
    }

    if (data === '/month_6' && marker === 'delete') {
        return deleteMonth(6);
    }

    if (data === '/month_7' && marker === 'delete') {
        return deleteMonth(7);
    }

    if (data === '/month_8' && marker === 'delete') {
        return deleteMonth(8);
    }

    if (data === '/month_9' && marker === 'delete') {
        return deleteMonth(9);
    }

    if (data === '/month_10' && marker === 'delete') {
        return deleteMonth(10);
    }

    if (data === '/month_11' && marker === 'delete') {
        return deleteMonth(11);
    }

    if (data === '/month_12' && marker === 'delete') {
        return deleteMonth(12);
    }

    if (data === '/month_1' && marker === 'list') {
        return listMonth(1);
    }

    if (data === '/month_2' && marker === 'list') {
        return listMonth(2);
    }

    if (data === '/month_3' && marker === 'list') {
        return listMonth(3);
    }

    if (data === '/month_4' && marker === 'list') {
        return listMonth(4);
    }

    if (data === '/month_5' && marker === 'list') {
        return listMonth(5);
    }

    if (data === '/month_6' && marker === 'list') {
        return listMonth(6);
    }

    if (data === '/month_7' && marker === 'list') {
        return listMonth(7);
    }

    if (data === '/month_8' && marker === 'list') {
        return listMonth(8);
    }

    if (data === '/month_9' && marker === 'list') {
        return listMonth(9);
    }

    if (data === '/month_10' && marker === 'list') {
        return listMonth(10);
    }

    if (data === '/month_11' && marker === 'list') {
        return listMonth(11);
    }

    if (data === '/month_12' && marker === 'list') {
        return listMonth(12);
    }

    if (data === '/add_company') {
        company = '';
        await bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó:');
        msg.message.text = null;
        marker = 'add_company_text';
    }

    if (data === '/list_company') {
        let listCompanyStr = '';
        let listCompany = {};
        await axios.get('https://tasker-webitel-default-rtdb.firebaseio.com/company.json').then(value => listCompany = value.data);
        await bot.sendMessage(chatID, '–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–ø–∞–Ω—ñ–π:')
        Object.values(listCompany).map((value, index) => listCompanyStr = listCompanyStr + (index + 1) + '. ' + value.company + '\n');
        return bot.sendMessage(chatID, listCompanyStr, goToMainMenu);
    }

    if (data === '/settings') {
        await bot.sendMessage(chatID, '‚öôÔ∏è');
        return bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', buttons_settings);
    }

    if (data === '/download') {
        const wb = new xl.Workbook();
        const headingColumnNames = [
            "‚Ññ",
            "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è",
            "–û–ø–∏—Å",
            "–ü–æ—Å–∏–ª–∞–Ω–Ω—è",
            "–¢–∏–ø",
            "–î–∂–µ—Ä–µ–ª–æ",
            "–î–∞—Ç–∞",
        ];

        let index = 1;
        let headingColumnIndex = 1;
        let rowIndex = 2;
        let listTask = {};
        let export_data = [];
        let ws = wb.addWorksheet('–í–∏–∫–ª–∏–∫–∏');

        await bot.sendMessage(chatID, '–§–∞–π–ª');
        await axios.get(`https://tasker-webitel-default-rtdb.firebaseio.com/users/${+msg.from.id}/${new Date().getFullYear()}/${new Date().getMonth() + 1}/tasks.json`).then(value => {
            listTask = value.data;
        });

        Object.values(listTask).map((value) => {
            export_data.push({
                id: index.toString(),
                company: value.company,
                description: value.description,
                link: value.link,
                type: value.type,
                source: value.source,
                date: value.date
            });
            index++;
        });

        await headingColumnNames.forEach(heading => {
            ws.cell(1, headingColumnIndex++)
                .string(heading)
        });

        await export_data.forEach(record => {
            let columnIndex = 1;
            Object.keys(record).forEach(columnName => {
                ws.cell(rowIndex, columnIndex++)
                    .string(record [columnName])
            });
            rowIndex++;
        });

        await wb.write(`–í–∏–∫–ª–∏–∫–∏ ${msg.from.first_name} ${msg.from.last_name}.xlsx`);

        setTimeout(() => {
            bot.sendDocument(chatID, `–í–∏–∫–ª–∏–∫–∏ ${msg.from.first_name} ${msg.from.last_name}.xlsx`);
        }, 2000);

        setTimeout(() => {
            bot.sendMessage(chatID, '–ì–æ—Ç–æ–≤–æ', goToMainMenu);
        }, 2500);
    }

    if (data === '/back_main') {
        return bot.sendMessage(chatID, '–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', buttons);
    }

    if (data === '/close') {
        await bot.sendMessage(chatID, '‚úåÔ∏è');
        return bot.sendMessage(chatID, '–†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    }
});